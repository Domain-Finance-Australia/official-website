---
import type { TTestimonials } from "../../../types";
import Heading from "../../Heading.astro";
import TestimonialCard from "./TestimonialCard.astro";

interface Props {
  block: TTestimonials | undefined;
}

const { block } = Astro.props;

if (!block) return null;

const testimonials = block.testimonials;
---

<section class="py-20">
  <Heading level={3} class="text-center text-white mb-15"
    >{block.heading}</Heading
  >
  <div class="infinite-scroll-container w-full overflow-hidden relative py-5">
    <div class="infinite-scroll-track flex w-fit gap-5 select-none">
      {testimonials.map((card) => <TestimonialCard {...card} />)}
      <!-- Duplicate cards for seamless loop -->
      {testimonials.map((card) => <TestimonialCard {...card} />)}
    </div>
  </div>
</section>

<style>
  .infinite-scroll-track {
    animation: scroll-left var(--scroll-duration) linear infinite;
  }

  @keyframes scroll-left {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  .infinite-scroll-container:hover .infinite-scroll-track {
    animation-play-state: var(--hover-state, running);
  }
</style>

<script is:inline>
  function initInfiniteScroll() {
    const container = document.querySelector(".infinite-scroll-container");
    const track = document.querySelector(".infinite-scroll-track");

    if (!container || !track) return;

    const speed = 90; // pixels per second

    function calculateDuration() {
      // Calculate duration based on track width and speed
      const trackWidth = track.scrollWidth / 2;
      let duration = trackWidth / speed;
      track.style.setProperty("--scroll-duration", `${duration}s`);
    }

    // Set pause on hover state
    container.style.setProperty("--hover-state", "paused");

    // Calculate initial duration
    calculateDuration();

    // Recalculate on window resize
    let resizeTimer;
    const handleResize = () => {
      clearTimeout(resizeTimer);
      resizeTimer = window.setTimeout(calculateDuration, 250);
    };

    window.addEventListener("resize", handleResize);

    // Cleanup function for when component is removed
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }

  initInfiniteScroll();

  document.addEventListener("astro:page-load", () => {
    initInfiniteScroll();
  });
</script>
